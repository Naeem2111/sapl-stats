// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  role         UserRole @default(PLAYER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  players Player[]

  @@map("users")
}

model Team {
  id        String   @id @default(cuid())
  name      String   @unique
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  players           Player[]
  homeMatches       Match[] @relation("HomeTeam")
  awayMatches       Match[] @relation("AwayTeam")
  playerMatchStats  PlayerMatchStat[]
  playerSeasonStats PlayerSeasonStat[]

  @@map("teams")
}

model Season {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  matches           Match[]
  playerSeasonStats PlayerSeasonStat[]

  @@map("seasons")
}

model Player {
  id        String   @id @default(cuid())
  gamertag  String   @unique
  realName  String?
  position  PlayerPosition
  userId    String
  teamId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  team              Team?              @relation(fields: [teamId], references: [id])
  playerMatchStats  PlayerMatchStat[]
  playerSeasonStats PlayerSeasonStat[]

  @@map("players")
}

model Match {
  id              String   @id @default(cuid())
  seasonId        String
  homeTeamId      String
  awayTeamId      String
  date            DateTime
  homeScore       Int      @default(0)
  awayScore       Int      @default(0)
  competitionType CompetitionType
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  season          Season           @relation(fields: [seasonId], references: [id])
  homeTeam        Team             @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam        Team             @relation("AwayTeam", fields: [awayTeamId], references: [id])
  playerMatchStats PlayerMatchStat[]

  @@map("matches")
}

model PlayerMatchStat {
  id            String   @id @default(cuid())
  matchId       String
  playerId      String
  teamId        String
  goals         Int      @default(0)
  assists       Int      @default(0)
  shots         Int      @default(0)
  passes        Int      @default(0)
  passAccuracy  Float    @default(0)
  tackles       Int      @default(0)
  interceptions Int      @default(0)
  saves         Int      @default(0)
  cleanSheet    Boolean  @default(false)
  rating        Float    @default(0)
  minutesPlayed Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  match  Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id])

  @@unique([matchId, playerId])
  @@map("player_match_stats")
}

model PlayerSeasonStat {
  id               String   @id @default(cuid())
  seasonId         String
  playerId         String
  teamId           String
  totalGoals       Int      @default(0)
  totalAssists     Int      @default(0)
  totalShots       Int      @default(0)
  totalPasses      Int      @default(0)
  avgPassAccuracy  Float    @default(0)
  totalTackles     Int      @default(0)
  totalInterceptions Int    @default(0)
  totalSaves       Int      @default(0)
  cleanSheets      Int      @default(0)
  avgRating        Float    @default(0)
  matchesPlayed    Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  season Season @relation(fields: [seasonId], references: [id])
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id])

  @@unique([seasonId, playerId])
  @@map("player_season_stats")
}

enum UserRole {
  ADMIN
  MANAGER
  PLAYER
}

enum PlayerPosition {
  GK
  CB
  LB
  RB
  CDM
  CM
  CAM
  LM
  RM
  LW
  RW
  ST
  CF
}

enum CompetitionType {
  LEAGUE
  CUP
  FRIENDLY
  PLAYOFF
}
